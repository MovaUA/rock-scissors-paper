// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rps

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameClient interface {
	// Connect connects a player to the game.
	// Request Player must have Name set (Id is ignored).
	// Response Player is assigned Id.
	Connect(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
	// Players streams all connected players,
	// and all players which connect later.
	Players(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Game_PlayersClient, error)
	// Start starts the game.
	Start(ctx context.Context, opts ...grpc.CallOption) (Game_StartClient, error)
}

type gameClient struct {
	cc grpc.ClientConnInterface
}

func NewGameClient(cc grpc.ClientConnInterface) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Connect(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/rps.Game/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameClient) Players(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Game_PlayersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Game_serviceDesc.Streams[0], "/rps.Game/Players", opts...)
	if err != nil {
		return nil, err
	}
	x := &gamePlayersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Game_PlayersClient interface {
	Recv() (*Player, error)
	grpc.ClientStream
}

type gamePlayersClient struct {
	grpc.ClientStream
}

func (x *gamePlayersClient) Recv() (*Player, error) {
	m := new(Player)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) Start(ctx context.Context, opts ...grpc.CallOption) (Game_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Game_serviceDesc.Streams[1], "/rps.Game/Start", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameStartClient{stream}
	return x, nil
}

type Game_StartClient interface {
	Send(*Choice) error
	Recv() (*Score, error)
	grpc.ClientStream
}

type gameStartClient struct {
	grpc.ClientStream
}

func (x *gameStartClient) Send(m *Choice) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameStartClient) Recv() (*Score, error) {
	m := new(Score)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServer is the server API for Game service.
// All implementations must embed UnimplementedGameServer
// for forward compatibility
type GameServer interface {
	// Connect connects a player to the game.
	// Request Player must have Name set (Id is ignored).
	// Response Player is assigned Id.
	Connect(context.Context, *Player) (*Player, error)
	// Players streams all connected players,
	// and all players which connect later.
	Players(*empty.Empty, Game_PlayersServer) error
	// Start starts the game.
	Start(Game_StartServer) error
	mustEmbedUnimplementedGameServer()
}

// UnimplementedGameServer must be embedded to have forward compatible implementations.
type UnimplementedGameServer struct {
}

func (*UnimplementedGameServer) Connect(context.Context, *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedGameServer) Players(*empty.Empty, Game_PlayersServer) error {
	return status.Errorf(codes.Unimplemented, "method Players not implemented")
}
func (*UnimplementedGameServer) Start(Game_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedGameServer) mustEmbedUnimplementedGameServer() {}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rps.Game/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Connect(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _Game_Players_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServer).Players(m, &gamePlayersServer{stream})
}

type Game_PlayersServer interface {
	Send(*Player) error
	grpc.ServerStream
}

type gamePlayersServer struct {
	grpc.ServerStream
}

func (x *gamePlayersServer) Send(m *Player) error {
	return x.ServerStream.SendMsg(m)
}

func _Game_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServer).Start(&gameStartServer{stream})
}

type Game_StartServer interface {
	Send(*Score) error
	Recv() (*Choice, error)
	grpc.ServerStream
}

type gameStartServer struct {
	grpc.ServerStream
}

func (x *gameStartServer) Send(m *Score) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameStartServer) Recv() (*Choice, error) {
	m := new(Choice)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rps.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Game_Connect_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Players",
			Handler:       _Game_Players_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Start",
			Handler:       _Game_Start_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rps.proto",
}
